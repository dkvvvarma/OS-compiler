#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Process {
    int id;
    int burst_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
};

bool compare_burst_time(Process p1, Process p2) {
    return p1.burst_time < p2.burst_time;
}

void calculate_times(vector<Process>& processes) {
    int n = processes.size();
    int current_time = 0;
    int total_waiting_time = 0;
    int total_turnaround_time = 0;

    // Sort processes by burst time
    sort(processes.begin(), processes.end(), compare_burst_time);

    // Process the tasks
    for (int i = 0; i < n; i++) {
        // Process the selected process
        processes[i].completion_time = current_time + processes[i].burst_time;
        processes[i].turnaround_time = processes[i].completion_time;
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
        current_time = processes[i].completion_time;
    }

    // Calculate average waiting time and average turnaround time
    double avg_waiting_time = (double) total_waiting_time / n;
    double avg_turnaround_time = (double) total_turnaround_time / n;
    cout << "Average waiting time: " << avg_waiting_time << endl;
    cout << "Average turnaround time: " << avg_turnaround_time << endl;
}

int main() {
    int n;
    do {
        cout << "Enter the number of processes (positive integer): ";
        cin >> n;
    } while (n <= 0);

    vector<Process> processes(n);
    cout << "Enter the burst time for each process (positive integer):\n";
    for (int i = 0; i < n; i++) {
        int pid = i + 1;
        int burst_time;
        do {
            cout << "Process " << pid << " burst time: ";
            cin >> burst_time;
        } while (burst_time <= 0);
        processes[i] = {pid, burst_time, -1, -1, -1};
    }

    calculate_times(processes);

    return 0;
}
